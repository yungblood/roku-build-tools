sub init()
    m.top.observeField("focusedChild", "onFocusChanged")
    m.firstFocus = true
    
    ' HACK: Observing these as aliased fields to work around an issue with
    '       Conviva unobserving the fields out from under us
    m.top.observeField("position", "onPositionChanged")
    m.top.observeField("state", "onVideoStateChanged")

    m.video = m.top.findNode("video")

    m.overlay = m.top.findNode("overlay")
    
    m.menu = m.top.findNode("menu")
    m.menu.observeField("buttonSelected", "onMenuItemSelected")
    
    m.stationLogo = m.top.findNode("stationLogo")
    m.showTitle = m.top.findNode("showTitle")
    m.episodeTitle = m.top.findNode("episodeTitle")
    m.seasonEpisode = m.top.findNode("seasonEpisode")
    m.description = m.top.findNode("description")
    m.remaining = m.top.findNode("remaining")
    
    m.watchNow = m.top.findNode("watchNow")
    m.watchNow.observeField("buttonSelected", "onWatchNow")

    m.scheduleOverlay = m.top.findNode("scheduleOverlay")
    m.scheduleGrid = m.top.findNode("scheduleGrid")
    m.scheduleGrid.observeField("itemFocused", "resetOverlayTimer")
    m.scheduleGrid.observeField("itemSelected", "resetOverlayTimer")
    m.scheduleFocus = m.top.findNode("scheduleFocus")
    
    m.updateTimer = m.top.findNode("updateTimer")
    m.updateTimer.observeField("fire", "updateSchedule")
    m.overlayTimer = m.top.findNode("overlayTimer")
    m.overlayTimer.observeField("fire", "onOverlayTimerFired")
    m.timeoutTimer = m.top.findNode("timeoutTimer")
    m.timeoutTimer.observeField("fire", "onTimeoutTimerFired")
    
    m.liveTV = m.top.findNode("liveTV")
    m.liveTVSelection = m.top.findNode("liveTVSelection")
    m.stations = m.top.findNode("stations")
    m.stations.observeField("buttonSelected", "onStationSelected")
    m.unavailable = m.top.findNode("unavailable")

    m.position = 0
    m.initialPosition = -1
    m.timeOffset = 0
    m.timedOut = false
    
    m.idleTimeout = asInteger(m.global.config.playback_timeout_live_tv, m.global.config.liveTimeout)

    m.top.observeField("visible", "onVisibleChanged")
end sub

sub onVisibleChanged()
    if m.top.visible then
        ' force a refresh
        m.station = invalid
        m.menu.focusedID = "liveTV"
        selectStation()
    else
        m.video.control = "stop"
    end if
end sub

sub onFocusChanged()
    if m.top.hasFocus() then
        if m.firstFocus then
            m.menu.setFocus(true)
            m.watchNow.setFocus(false)
            m.firstFocus = false
        else
            if m.liveTV.visible then
                m.scheduleOverlay.translation = [0, 783]
                m.watchNow.setFocus(true)
            else if m.liveTVSelection.visible then
                m.stations.setFocus(true)
            else
                m.menu.setFocus(true)
            end if
        end if
    end if
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    if press then
        resetOverlayTimer()
        if not m.liveTV.visible or m.overlay.visible then
            if key = "down" then
                if m.menu.isInFocusChain() then
                    if m.liveTV.visible then
                        m.watchNow.setFocus(true)
                    else if m.liveTVSelection.visible then
                        m.stations.setFocus(true)
                    end if
                    return true
                else if m.watchNow.hasFocus() then
                    m.scheduleOverlay.translation = [0, 762]
                    m.scheduleGrid.setFocus(true)
                    m.scheduleFocus.visible = true
                    return true
                end if
            else if key = "up" then
                if m.scheduleGrid.hasFocus() then
                    m.scheduleOverlay.translation = [0, 783]
                    m.watchNow.setFocus(true)
                    m.scheduleFocus.visible = false
                    return true
                else
                    m.menu.setFocus(true)
                    return true
                end if
            end if
        else
            showOverlay()
            return true
        end if
    end if
    return false
end function

sub onOverlayTimerFired()
    if m.video.state = "playing" then
        hideOverlay()
    end if
end sub

sub onMenuItemSelected(nodeEvent as object)
    menuItem = nodeEvent.getData()
    if menuItem <> "liveTV" then
        m.video.control = "stop"
    end if
    m.top.menuItemSelected = menuItem
end sub

sub onWatchNow()
    if m.video.state = "stopped" then
        m.station = invalid
        onStationChanged()
    end if
    hideOverlay()
end sub

sub onStationChanged()
    if m.station = invalid or not m.station.isSameNode(m.top.station) then
        m.global.showSpinner = true

        m.idleTimeout = asInteger(m.global.config.playback_timeout_live_tv, m.global.config.liveTimeout)

        m.liveTV.visible = true
        m.liveTVSelection.visible = false
        m.unavailable.visible = false
        m.nowPlaying = invalid
        
        if not m.menu.isInFocusChain() then
            m.watchNow.setFocus(true)
        end if

        m.station = m.top.station
        m.stationLogo.uri = m.station.affiliate.hdPosterUrl

        m.streamTask = createObject("roSGNode", "LoadLiveStreamTask")
        m.streamTask.observeField("stream", "onStreamLoaded")
        m.streamTask.station = m.station
        m.streamTask.control = "run"

        m.scheduleTask = createObject("roSGNode", "LoadLiveScheduleTask")
        m.scheduleTask.observeField("schedule", "onScheduleLoaded")
        m.scheduleTask.scheduleUrl = m.station.scheduleUrl
        m.scheduleTask.control = "run"

        m.top.omnitureName = "/livetv"
        m.top.omniturePageType = "livetv_stream"
        trackScreenView()

        m.omnitureParams = {}
        m.omnitureParams["showEpisodeTitle"] = m.station.trackingTitle
        m.omnitureParams.v38 = "live"
        m.omnitureParams.v46 = ""
        m.omnitureParams.pev2 = "video"
        m.omnitureParams.pev3 = "video"

        trackScreenAction("trackVideoLoad", m.omnitureParams, m.top.omnitureName, m.top.omniturePageType, ["event52"])
    end if
end sub

sub onStreamLoaded(nodeEvent as object)
    ' the main.brs event loop is observing this change and will
    ' start the playback
    stream = nodeEvent.getData()
    stream.station = m.station
    m.video.content = stream
    resetOverlayTimer(true)

    sendDWAnalytics({method: "playerInit", params: [] })
    sendDWAnalytics({method: "playerLiveStart", params: [m.station, getPlayerPosition()] })
    
    if m.global.comscore <> invalid then
        m.global.comscore.content = m.station
    end if
    m.convivaTask = createObject("roSGNode", "ConvivaTask")
    m.convivaTask.video = m.video
    m.convivaTask.content = m.station
    m.convivaTask.control = "run"

    m.video.control = "play"
    
    m.global.showSpinner = false
end sub

sub onScheduleLoaded(nodeEvent as object)
    schedule = nodeEvent.getData()
    m.schedule = createObject("roSGNode", "ContentNode")
    m.schedule.appendChildren(schedule)
    updateSchedule()
    
    m.scheduleGrid.content = m.schedule
    
    m.updateTimer.control = "start"
end sub

sub onVideoStateChanged(nodeEvent as object)
    state = nodeEvent.getData()
    m.global.showSpinner = (state = "buffering")
    if state = "playing" then
        if m.global.comscore <> invalid then
            m.global.comscore.videoStart = true
        end if
    else if state = "finished" then
        sendDWAnalytics({method: "playerLiveEnd", params: [m.station, getPlayerPosition(), getPlayerPosition()] })
        if m.global.comscore <> invalid then
            m.global.comscore.videoEnd = true
        end if
    else if state = "stopped" then
        if m.station <> invalid then
            if m.timedOut then
                sendDWAnalytics({method: "playerLiveForcedEnd", params: ["forcedend", m.station, getPlayerPosition(), getPlayerPosition()] })
            else
                sendDWAnalytics({method: "playerLiveStop", params: [m.station, getPlayerPosition(), getPlayerPosition()] })
            end if
            if m.global.comscore <> invalid then
                m.global.comscore.videoEnd = true
            end if
        end if
    else if state = "error" then
        sendDWAnalytics({method: "playerLiveError", params: [m.video.errorMsg, m.station, getPlayerPosition(), getPlayerPosition()] })
        if m.global.comscore <> invalid then
            m.global.comscore.videoEnd = true
        end if

        error = "Unfortunately, an error occurred during playback."
        ' Check for a network connection error
        if not createObject("roDeviceInfo").getLinkStatus() then
            error = error + " Please check your network connection and try again."
        else
            error = error + " Please try again."
        end if
        dialog = createCbsDialog("Error", error, ["OK"])
        dialog.observeField("buttonSelected", "onErrorDialogClose")
        m.global.dialog = dialog
    end if
end sub

sub onErrorDialogClose(nodeEvent as object)
    dialog = nodeEvent.getRoSGNode()
    if dialog <> invalid then
        dialog.close = true
    end if
    m.video.control = "stop"
    showOverlay()
end sub

sub onPositionChanged()
    if m.initialPosition = -1 then
        m.initialPosition = m.video.position
    end if
    m.position = m.video.position - m.initialPosition
    sendDWAnalytics({method: "playerLivePlay", params: [m.station, getPlayerPosition(), getPlayerPosition()] })
    
    if m.position > 0 then
        if m.position mod 10 = 0 then
            sendDWAnalytics({method: "playerLivePlayPosition", params: [m.station, getPlayerPosition()] })
        end if
        if m.position mod 60 = 0 then
            trackScreenAction("trackVideo", m.omnitureParams, m.top.omnitureName, m.top.omniturePageType, ["event57=60"])
        end if
    end if
    
    idleTime = createObject("roDeviceInfo").timeSinceLastKeyPress()
    if idleTime >= m.idleTimeout and m.stillWatchingDialog = invalid then
        m.stillWatchingDialog = createCbsDialog("", "Are you still watching?", ["Continue watching"])
        m.stillWatchingDialog.observeField("buttonSelected", "onTimeoutDialogClosed")
        m.global.dialog = m.stillWatchingDialog
        
        m.timeoutTimer.control = "start"
    end if
end sub

sub onTimeoutDialogClosed(nodeEvent as object)
    m.timeoutTimer.control = "stop"
    dialog = nodeEvent.getRoSGNode()
    dialog.close = true
    m.stillWatchingDialog = invalid

    sendDWAnalytics({method: "playerLiveForcedEnd", params: ["resume", m.station, getPlayerPosition(), getPlayerPosition()] })
    m.video.control = "resume"
end sub

sub onTimeoutTimerFired()
    m.timedOut = true
    m.video.control = "stop"
    m.stillWatchingDialog.close = true
    m.stillWatchingDialog = invalid
    showOverlay()
end sub

function getPlayerPosition() as integer
    return m.position
end function

sub selectStation()
    stations = m.global.stations
    if stations.count() = 0 then
        m.unavailable.visible = true
       
        m.top.omnitureName = "/livetv/check availability"
        m.top.omniturePageType = "livetv_unavailable"
        trackScreenView()
    else if stations.count() = 1 then
        m.top.station = stations[0]
        m.liveTV.visible = true
    else
        if m.global.station <> invalid and m.global.station <> "" then
            for each station in stations
                if station.id = m.global.station then
                    m.top.station = station
                    m.liveTV.visible = true
                    return
                end if
            next
        end if
        m.stations.removeChildrenIndex(m.stations.getChildCount(), 0)
        for i = 0 to stations.count() - 1
            button = m.stations.createChild("LiveTVButton")
            button.station = stations[i]
            button.processKeyEvents = false
        next
        m.liveTVSelection.visible = true
       
        m.top.omnitureName = "livetv/provider/select"
        m.top.omniturePageType = "provider_select"
        trackScreenView()
    end if
end sub

sub onStationSelected(nodeEvent as object)
    button = m.stations.getChild(nodeEvent.getData())
    if button <> invalid then
        m.top.station = button.station

        m.global.station = button.station.id
        m.regTask = createObject("roSGNode", "RegistryTask")
        m.regTask.key = "liveTV"
        m.regTask.value = button.station.id
        m.regTask.section = m.global.config.registrySection
        m.regTask.mode = "save"
    end if
end sub

sub hideOverlay()
    if m.overlay.isInFocusChain() then
        m.overlay.visible = false
        m.menu.visible = false
        m.video.setFocus(true)
    end if
end sub

sub showOverlay()
    m.overlay.visible = true
    m.menu.visible = true
    m.watchNow.setFocus(true)
end sub

sub resetOverlayTimer(force = false as boolean)
    m.overlayTimer.control = "stop"
    if force or m.video.state = "playing" then
        m.overlayTimer.control = "start"
    end if
end sub

sub updateSchedule()
    nowTime = createObject("roDateTime").asSeconds() + m.timeOffset
 
    scheduleUpdated = false
    if m.nowPlaying = invalid or m.nowPlaying.endTime <= nowTime then
        program = m.schedule.getChild(0)
        while m.schedule.getChildCount() > 0 and program.endTime <= nowTime
            m.schedule.removeChild(program)
            program = m.schedule.getChild(0)
            scheduleUpdated = true
        end while
        m.nowPlaying = m.schedule.getChild(0)
        m.schedule.removeChild(m.nowPlaying) 
    end if
    updateNowPlaying()
end sub

sub updateNowPlaying()
    nowPlaying = m.nowPlaying
    if nowPlaying <> invalid then
        m.showTitle.text = uCase(nowPlaying.title)
        m.episodeTitle.text = nowPlaying.episodeTitle
        if m.episodeTitle.text = "" then
            m.episodeTitle.height = 1
        else
            m.episodeTitle.height = 0
        end if
        m.description.text = nowPlaying.description
    
        nowTime = createObject("roDateTime").asSeconds() + m.timeOffset
        remaining = (nowPlaying.endTime - nowTime) \ 60
        if remaining = 0 then
            m.remaining.text = "Less than a minute"
        else if remaining = 1 then
            m.remaining.text = "1 minute"
        else
            m.remaining.text = remaining.toStr() + " minutes"
        end if
        m.remaining.text = m.remaining.text + " remaining"
    end if
end sub
